// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Patients.Data;

namespace Patients.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210403150547_FixDentalRecordPKMigration")]
    partial class FixDentalRecordPKMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Patients.Data.Entities.DentalRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cause")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToothNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PatientID", "ToothNumber");

                    b.ToTable("DentalRecords");
                });

            modelBuilder.Entity("Patients.Data.Entities.DiaryRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("DiaryRecords");
                });

            modelBuilder.Entity("Patients.Data.Entities.Patient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Storage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Surname");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Patients.Data.Entities.PatientTooth", b =>
                {
                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToothNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("PatientID", "ToothNumber");

                    b.HasIndex("ToothNumber");

                    b.HasIndex("PatientID", "ToothNumber");

                    b.ToTable("PatientsTeeth");
                });

            modelBuilder.Entity("Patients.Data.Entities.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Patients.Data.Entities.Tooth", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Number");

                    b.ToTable("Teeth");

                    b.HasData(
                        new
                        {
                            Number = 11
                        },
                        new
                        {
                            Number = 12
                        },
                        new
                        {
                            Number = 13
                        },
                        new
                        {
                            Number = 14
                        },
                        new
                        {
                            Number = 15
                        },
                        new
                        {
                            Number = 16
                        },
                        new
                        {
                            Number = 17
                        },
                        new
                        {
                            Number = 18
                        },
                        new
                        {
                            Number = 21
                        },
                        new
                        {
                            Number = 22
                        },
                        new
                        {
                            Number = 23
                        },
                        new
                        {
                            Number = 24
                        },
                        new
                        {
                            Number = 25
                        },
                        new
                        {
                            Number = 26
                        },
                        new
                        {
                            Number = 27
                        },
                        new
                        {
                            Number = 28
                        },
                        new
                        {
                            Number = 31
                        },
                        new
                        {
                            Number = 32
                        },
                        new
                        {
                            Number = 33
                        },
                        new
                        {
                            Number = 34
                        },
                        new
                        {
                            Number = 35
                        },
                        new
                        {
                            Number = 36
                        },
                        new
                        {
                            Number = 37
                        },
                        new
                        {
                            Number = 38
                        },
                        new
                        {
                            Number = 41
                        },
                        new
                        {
                            Number = 42
                        },
                        new
                        {
                            Number = 43
                        },
                        new
                        {
                            Number = 44
                        },
                        new
                        {
                            Number = 45
                        },
                        new
                        {
                            Number = 46
                        },
                        new
                        {
                            Number = 47
                        },
                        new
                        {
                            Number = 48
                        },
                        new
                        {
                            Number = 51
                        },
                        new
                        {
                            Number = 52
                        },
                        new
                        {
                            Number = 53
                        },
                        new
                        {
                            Number = 54
                        },
                        new
                        {
                            Number = 55
                        },
                        new
                        {
                            Number = 61
                        },
                        new
                        {
                            Number = 62
                        },
                        new
                        {
                            Number = 63
                        },
                        new
                        {
                            Number = 64
                        },
                        new
                        {
                            Number = 65
                        },
                        new
                        {
                            Number = 71
                        },
                        new
                        {
                            Number = 72
                        },
                        new
                        {
                            Number = 73
                        },
                        new
                        {
                            Number = 74
                        },
                        new
                        {
                            Number = 75
                        },
                        new
                        {
                            Number = 81
                        },
                        new
                        {
                            Number = 82
                        },
                        new
                        {
                            Number = 83
                        },
                        new
                        {
                            Number = 84
                        },
                        new
                        {
                            Number = 85
                        });
                });

            modelBuilder.Entity("Patients.Data.Entities.DentalRecord", b =>
                {
                    b.HasOne("Patients.Data.Entities.PatientTooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("PatientID", "ToothNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tooth");
                });

            modelBuilder.Entity("Patients.Data.Entities.DiaryRecord", b =>
                {
                    b.HasOne("Patients.Data.Entities.Patient", "Patient")
                        .WithMany("Diary")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Data.Entities.PatientTooth", b =>
                {
                    b.HasOne("Patients.Data.Entities.Patient", "Patient")
                        .WithMany("Teeth")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patients.Data.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Tooth");
                });

            modelBuilder.Entity("Patients.Data.Entities.Payment", b =>
                {
                    b.HasOne("Patients.Data.Entities.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Data.Entities.Patient", b =>
                {
                    b.Navigation("Diary");

                    b.Navigation("Payments");

                    b.Navigation("Teeth");
                });
#pragma warning restore 612, 618
        }
    }
}
