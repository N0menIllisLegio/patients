// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Patients.Data;

namespace Patients.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210403133408_AddTeethTableMigration")]
    partial class AddTeethTableMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Patients.Data.Entities.DentalRecord", b =>
                {
                    b.Property<int>("ToothNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cause")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("ToothNumber");

                    b.ToTable("DentalRecords");
                });

            modelBuilder.Entity("Patients.Data.Entities.DiaryRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("DiaryRecords");
                });

            modelBuilder.Entity("Patients.Data.Entities.Patient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Storage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Surname");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Patients.Data.Entities.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Patients.Data.Entities.Tooth", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Number");

                    b.ToTable("Teeth");
                });

            modelBuilder.Entity("Patients.Data.Entities.DentalRecord", b =>
                {
                    b.HasOne("Patients.Data.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tooth");
                });

            modelBuilder.Entity("Patients.Data.Entities.DiaryRecord", b =>
                {
                    b.HasOne("Patients.Data.Entities.Patient", "Patient")
                        .WithMany("Diary")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Data.Entities.Payment", b =>
                {
                    b.HasOne("Patients.Data.Entities.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Data.Entities.Patient", b =>
                {
                    b.Navigation("Diary");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
